"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[147],{4090:(e,t,a)=>{a.r(t),a.d(t,{frontMatter:()=>d,contentTitle:()=>u,metadata:()=>m,toc:()=>p,default:()=>c});var n=a(7896),r=a(1461),l=(a(2784),a(876)),o=a(2039),i=a(1846),s=["components"],d={sidebar_label:"usePersistedState",sidebar_position:9,title:"usePersistedState"},u=void 0,m={unversionedId:"custom-hooks/user-persisted-state",id:"custom-hooks/user-persisted-state",isDocsHomePage:!1,title:"usePersistedState",description:"About",source:"@site/docs/custom-hooks/user-persisted-state.mdx",sourceDirName:"custom-hooks",slug:"/custom-hooks/user-persisted-state",permalink:"/react-hooks-extended/custom-hooks/user-persisted-state",editUrl:"https://github.com/MomenSherif/react-hooks-extended/tree/master/apps/docs/docs/custom-hooks/user-persisted-state.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_label:"usePersistedState",sidebar_position:9,title:"usePersistedState"},sidebar:"docsSidebar",previous:{title:"useDebounceEffect",permalink:"/react-hooks-extended/custom-hooks/use-debounce-effect"},next:{title:"useMapState",permalink:"/react-hooks-extended/custom-hooks/use-map-state"}},p=[{value:"About",id:"about",children:[],level:2},{value:"Import",id:"import",children:[],level:2},{value:"Baisc example",id:"baisc-example",children:[],level:2},{value:"Arguments",id:"arguments",children:[],level:2},{value:"Return",id:"return",children:[],level:2},{value:"Playground",id:"playground",children:[],level:2}],k={toc:p};function c(e){var t=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"about"},"About"),(0,l.kt)("p",null,"Create a persisted state value saved in local storage."),(0,l.kt)("h2",{id:"import"},"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { usePersistedState } from 'react-hooks-extended';\n")),(0,l.kt)("h2",{id:"baisc-example"},"Baisc example"),(0,l.kt)(o.Z,{groupId:"lng",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [state, setState] = usePersistedState(\'username\', \'\');\n  return (\n    <div>\n      <label htmlFor="username">username</label>\n      <div>\n        <input\n          id="username"\n          type="text"\n          value={state}\n          onChange={e => setState(e.target.value)}\n        />\n      </div>\n    </div>\n  );\n}\n'))),(0,l.kt)(i.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'function Example() {\n  const [state, setState] = usePersistedState(\'username\', \'\');\n  return (\n    <div>\n      <label htmlFor="username">username</label>\n      <div>\n        <input\n          id="username"\n          type="text"\n          value={state}\n          onChange={e => setState(e.target.value)}\n        />\n      </div>\n    </div>\n  );\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"arguments"},"Arguments"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"key")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Local storage item key."),(0,l.kt)("td",{parentName:"tr",align:"left"},"true"),(0,l.kt)("td",{parentName:"tr",align:"left"})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"initialState")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"S")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"() => S")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Local storage item key."),(0,l.kt)("td",{parentName:"tr",align:"left"},"true"),(0,l.kt)("td",{parentName:"tr",align:"left"})))),(0,l.kt)("h2",{id:"return"},"Return"),(0,l.kt)("p",null,"Array with a stateful value, a function to update it. and a function to remove the item from local storage."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Return value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"state")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"S")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Current state")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"setState")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"(state: S) => void")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"(prevState: S) => S")),(0,l.kt)("td",{parentName:"tr",align:"left"},"State setter")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"remove")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Function")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Remove the item from local storage")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"playground"},"Playground"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Playground() {\n  const [value, setValue] = useState('');\n  const [todos, setTodos, remove] = usePersistedState('todos', []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    setTodos(t => [...t, value]);\n    setValue('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"todo\">Todo</label>\n        <div>\n          <input\n            id=\"todo\"\n            type=\"text\"\n            value={value}\n            onChange={e => setValue(e.target.value)}\n          />\n        </div>\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      <ul>\n        {todos.map((todo, idx) => (\n          <li key={idx}>\n            <span>{todo}</span>{' '}\n            <button\n              onClick={() => {\n                setTodos(t => t.filter((_, i) => i !== idx));\n              }}\n            >\n              X\n            </button>\n          </li>\n        ))}\n      </ul>\n      <button onClick={remove}>Remove from localStorage</button>\n    </div>\n  );\n}\n")))}c.isMDXComponent=!0}}]);