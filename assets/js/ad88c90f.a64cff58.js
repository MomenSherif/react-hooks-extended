"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[793],{3528:(t,e,n)=>{n.r(e),n.d(e,{frontMatter:()=>u,contentTitle:()=>s,metadata:()=>p,toc:()=>m,default:()=>h});var a=n(7896),r=n(1461),l=(n(2784),n(876)),o=n(2039),i=n(1846),d=["components"],u={sidebar_label:"useArrayState",sidebar_position:11,title:"useArrayState"},s=void 0,p={unversionedId:"custom-hooks/use-array-state",id:"custom-hooks/use-array-state",isDocsHomePage:!1,title:"useArrayState",description:"About",source:"@site/docs/custom-hooks/use-array-state.mdx",sourceDirName:"custom-hooks",slug:"/custom-hooks/use-array-state",permalink:"/react-hooks-extended/custom-hooks/use-array-state",editUrl:"https://github.com/MomenSherif/react-hooks-extended/tree/master/apps/docs/docs/custom-hooks/use-array-state.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_label:"useArrayState",sidebar_position:11,title:"useArrayState"},sidebar:"docsSidebar",previous:{title:"useMapState",permalink:"/react-hooks-extended/custom-hooks/use-map-state"},next:{title:"useQuery",permalink:"/react-hooks-extended/custom-hooks/use-query"}},m=[{value:"About",id:"about",children:[],level:2},{value:"Import",id:"import",children:[],level:2},{value:"Baisc example",id:"baisc-example",children:[],level:2},{value:"Arguments",id:"arguments",children:[],level:2},{value:"Return",id:"return",children:[],level:2},{value:"Playground",id:"playground",children:[],level:2}],k={toc:m};function h(t){var e=t.components,n=(0,r.Z)(t,d);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"about"},"About"),(0,l.kt)("p",null,"Manage state in array format easier with useArrayState."),(0,l.kt)("h2",{id:"import"},"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useArrayState } from 'react-hooks-extended';\n")),(0,l.kt)("h2",{id:"baisc-example"},"Baisc example"),(0,l.kt)(o.Z,{groupId:"lng",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [value, setValue] = useState('');\n  const [todos, { push, unshift, pop, shift, remove }] = useArrayState([]);\n\n  return (\n    <div>\n      <h1>Todos</h1>\n      <ul>\n        {todos.map(({ id, text }) => (\n          <li key={id}>\n            <span>{text}</span>{' '}\n            <button onClick={() => remove(t => t.id === id)}>X</button>\n          </li>\n        ))}\n      </ul>\n      <div>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            if (!value) return;\n            unshift({ id: Date.now(), text: value });\n            setValue('');\n          }}\n        >\n          Unshift\n        </button>\n        <button\n          onClick={() => {\n            if (!value) return;\n            push({ id: Date.now(), text: value });\n            setValue('');\n          }}\n        >\n          Push\n        </button>\n      </div>\n      <div>\n        <button onClick={shift}>Shift</button>\n        <button onClick={pop}>Pop</button>\n      </div>\n    </div>\n  );\n}\n"))),(0,l.kt)(i.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"interface Todo {\n  id: number;\n  text: string;\n}\n\nfunction Example() {\n  const [value, setValue] = useState('');\n  const [todos, { push, unshift, pop, shift, remove }] = useArrayState<Todo>(\n    []\n  );\n\n  return (\n    <div>\n      <h1>Todos</h1>\n      <ul>\n        {todos.map(({ id, text }) => (\n          <li key={id}>\n            <span>{text}</span>{' '}\n            <button onClick={() => remove(t => t.id === id)}>X</button>\n          </li>\n        ))}\n      </ul>\n      <div>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            if (!value) return;\n            unshift({ id: Date.now(), text: value });\n            setValue('');\n          }}\n        >\n          Unshift\n        </button>\n        <button\n          onClick={() => {\n            if (!value) return;\n            push({ id: Date.now(), text: value });\n            setValue('');\n          }}\n        >\n          Push\n        </button>\n      </div>\n      <div>\n        <button onClick={shift}>Shift</button>\n        <button onClick={pop}>Pop</button>\n      </div>\n    </div>\n  );\n}\n")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"arguments"},"Arguments"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"initialState")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"S[]")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"() => S[]")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Initial state value"),(0,l.kt)("td",{parentName:"tr",align:"left"},"true"),(0,l.kt)("td",{parentName:"tr",align:"left"})))),(0,l.kt)("h2",{id:"return"},"Return"),(0,l.kt)("p",null,"Array with a stateful value and methods to update the array."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Return value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"state")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"S[]")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Current state")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"object")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Helper methods to update array state")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.set")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"(value: S"),"|",(0,l.kt)("inlineCode",{parentName:"td"},"(prevState: S) => S) => void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Set new array state")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.push")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"(...value: S[]) => void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Adds one or more elements to the end of an array")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.unshift")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"(...value: S[]) => void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Adds one or more elements to the beginning of an array")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.pop")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Function")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Removes the last element from an array")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.shift")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Function")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Removes the first element from an array")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.remove")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"(predicate: (value: S, index: number, array: S[]) => boolean) => void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Removes all elements that pass the test implemented by the predicate function")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.removeAll")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Function")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Removes all array elements")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"methods.update")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"(predicate: (value: S, index: number, array: S[]) => boolean, updater: (prevValue: S, index: number) => S) void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Update all elements that pass the test implemented by the predicate function.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"playground"},"Playground"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Playground() {\n  const [value, setValue] = useState('');\n  const [todos, { push, unshift, pop, shift, remove, removeAll, update }] =\n    useArrayState([]);\n\n  const todoIDsToDelete = useMemo(\n    () => new Set(todos.filter(t => t.checked).map(t => t.id)),\n    [todos]\n  );\n\n  return (\n    <div>\n      <h1>Todos</h1>\n      <button\n        onClick={() => remove(todo => todoIDsToDelete.has(todo.id))}\n        disabled={!todoIDsToDelete.size}\n      >\n        Delete {todoIDsToDelete.size || '...'}\n      </button>\n      <button onClick={removeAll} disabled={!todos.length}>\n        Delete All\n      </button>\n      <ul>\n        {todos.map(({ id, text, checked }) => (\n          <li key={id}>\n            <input\n              type=\"checkbox\"\n              checked={checked}\n              onChange={e =>\n                update(\n                  t => t.id === id,\n                  prevState => ({ ...prevState, checked: e.target.checked })\n                )\n              }\n            />\n            <span>{text}</span> <button onClick={() => remove(t => t.id === id)}>X</button>\n          </li>\n        ))}\n      </ul>\n      <div>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            if (!value) return;\n            unshift({ id: Date.now(), text: value, checked: false });\n            setValue('');\n          }}\n        >\n          Unshift\n        </button>\n        <button\n          onClick={() => {\n            if (!value) return;\n            push({ id: Date.now(), text: value, checked: false });\n            setValue('');\n          }}\n        >\n          Push\n        </button>\n      </div>\n      <div>\n        <button onClick={shift}>Shift</button>\n        <button onClick={pop}>Pop</button>\n      </div>\n    </div>\n  );\n}\n")))}h.isMDXComponent=!0}}]);