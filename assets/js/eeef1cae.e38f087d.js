"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[108],{7102:(t,e,a)=>{a.r(e),a.d(e,{frontMatter:()=>p,contentTitle:()=>s,metadata:()=>u,toc:()=>m,default:()=>g});var n=a(7896),l=a(1461),r=(a(2784),a(876)),o=a(2039),i=a(1846),d=["components"],p={sidebar_label:"useMapState",sidebar_position:10,title:"useMapState"},s=void 0,u={unversionedId:"custom-hooks/use-map-state",id:"custom-hooks/use-map-state",isDocsHomePage:!1,title:"useMapState",description:"About",source:"@site/docs/custom-hooks/use-map-state.mdx",sourceDirName:"custom-hooks",slug:"/custom-hooks/use-map-state",permalink:"/react-hooks-extended/custom-hooks/use-map-state",editUrl:"https://github.com/MomenSherif/react-hooks-extended/tree/master/apps/docs/docs/custom-hooks/use-map-state.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"useMapState",sidebar_position:10,title:"useMapState"},sidebar:"docsSidebar",previous:{title:"usePersistedState",permalink:"/react-hooks-extended/custom-hooks/user-persisted-state"},next:{title:"useArrayState",permalink:"/react-hooks-extended/custom-hooks/use-array-state"}},m=[{value:"About",id:"about",children:[],level:2},{value:"Import",id:"import",children:[],level:2},{value:"Baisc example",id:"baisc-example",children:[],level:2},{value:"Arguments",id:"arguments",children:[],level:2},{value:"Return",id:"return",children:[],level:2},{value:"Playground",id:"playground",children:[],level:2}],k={toc:m};function g(t){var e=t.components,a=(0,l.Z)(t,d);return(0,r.kt)("wrapper",(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"about"},"About"),(0,r.kt)("p",null,"Manage state in a key value pair map easier with useMapState."),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useMapState } from 'react-hooks-extended';\n")),(0,r.kt)("h2",{id:"baisc-example"},"Baisc example"),(0,r.kt)(o.Z,{groupId:"lng",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [state, { set, setMultiple, remove }] = useMapState({\n    loading: true,\n    data: null,\n    error: null,\n  });\n\n  return (\n    <div>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n      <button onClick={() => set('loading', true)}>Loading | true</button>\n      <button onClick={() => set('loading', false)}>Loading | false</button>\n      <button onClick={() => set('loading', s => !s)}>Loading | toggle</button>\n      <button\n        onClick={() =>\n          setMultiple({\n            loading: false,\n            data: [1, 2, 3],\n          })\n        }\n      >\n        Set data & loading\n      </button>\n      <button onClick={() => remove('data')}>Remove data</button>\n    </div>\n  );\n}\n"))),(0,r.kt)(i.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function Example() {\n  const [state, { set, setMultiple, remove }] = useMapState<{\n    loading: boolean;\n    data: number[] | null;\n    error: string | null;\n  }>({\n    loading: true,\n    data: null,\n    error: null,\n  });\n\n  return (\n    <div>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n      <button onClick={() => set('loading', true)}>Loading | true</button>\n      <button onClick={() => set('loading', false)}>Loading | false</button>\n      <button onClick={() => set('loading', s => !s)}>Loading | toggle</button>\n      <button\n        onClick={() =>\n          setMultiple({\n            loading: false,\n            data: [1, 2, 3],\n          })\n        }\n      >\n        Set data & loading\n      </button>\n      <button onClick={() => remove('data')}>Remove data</button>\n    </div>\n  );\n}\n")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"initialState")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"S")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"() => S")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Initial state value"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h2",{id:"return"},"Return"),(0,r.kt)("p",null,"Array with a stateful value and methods to update the map."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Return value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"S extends object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Current state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"methods")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Helper methods to update map state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"methods.set")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"}," (key: keyof S, value: S"),"|",(0,r.kt)("inlineCode",{parentName:"td"},"(prevState: S) => S) => void ")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set a key value pair in map")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"methods.remove")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(key: keyof S) => void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Remove a key value pair in map")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"methods.has")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(key: keyof S) => boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If key exists in map")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"methods.setMultiple")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(value: Partial<S>"),"|",(0,r.kt)("inlineCode",{parentName:"td"},"(prevState: S) => Partial<S>) => void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"set multiple key value pair in map")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"methods.removeMultiple")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(...keys: (keyof S)[]) => void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Remove multiple key value pair in map")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"methods.removeAll")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Function")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Remove all key value pair in map")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"playground"},"Playground"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Playground() {\n  const [state, { set, setMultiple, remove, removeMultiple, removeAll, has }] =\n    useMapState({\n      loading: true,\n      data: null,\n      error: null,\n    });\n\n  return (\n    <div>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n      <p>has loading: {String(has('loading'))}</p>\n      <button onClick={() => set('loading', true)}>Loading | true</button>\n      <button onClick={() => set('loading', false)}>Loading | false</button>\n      <button onClick={() => set('loading', s => !s)}>Loading | toggle</button>\n      <button\n        onClick={() =>\n          setMultiple({\n            loading: false,\n            data: [1, 2, 3],\n          })\n        }\n      >\n        Set data & loading\n      </button>\n      <button onClick={() => remove('data')}>Remove data</button>\n      <button onClick={removeAll}>Remove all</button>\n      <button onClick={() => removeMultiple('loading', 'error')}>\n        Remove loading & error\n      </button>\n    </div>\n  );\n}\n")))}g.isMDXComponent=!0}}]);